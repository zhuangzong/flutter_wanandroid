// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wan/app/data/repository/user_entity.dart';
import 'package:wan/generated/json/user_entity_helper.dart';
import 'package:wan/app/data/repository/navi_bean_entity.dart';
import 'package:wan/generated/json/navi_bean_entity_helper.dart';
import 'package:wan/app/data/repository/question_entity.dart';
import 'package:wan/generated/json/question_entity_helper.dart';
import 'package:wan/app/data/repository/coin_entity.dart';
import 'package:wan/generated/json/coin_entity_helper.dart';
import 'package:wan/app/data/repository/main_top_list_entity.dart';
import 'package:wan/generated/json/main_top_list_entity_helper.dart';
import 'package:wan/app/data/repository/main_list_entity.dart';
import 'package:wan/generated/json/main_list_entity_helper.dart';
import 'package:wan/app/data/repository/system_bean_entity.dart';
import 'package:wan/generated/json/system_bean_entity_helper.dart';
import 'package:wan/app/data/repository/comments_entity.dart';
import 'package:wan/generated/json/comments_entity_helper.dart';
import 'package:wan/app/data/repository/article_entity.dart';
import 'package:wan/generated/json/article_entity_helper.dart';
import 'package:wan/app/data/repository/banner_bean_entity.dart';
import 'package:wan/generated/json/banner_bean_entity_helper.dart';
import 'package:wan/app/data/repository/coin_list_entity.dart';
import 'package:wan/generated/json/coin_list_entity_helper.dart';
import 'package:wan/app/data/repository/userinfo_entity.dart';
import 'package:wan/generated/json/userinfo_entity_helper.dart';
import 'package:wan/app/data/repository/coin_rank_entity.dart';
import 'package:wan/generated/json/coin_rank_entity_helper.dart';
import 'package:wan/app/data/repository/hotkey_entity.dart';
import 'package:wan/generated/json/hotkey_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;
			case NaviBeanEntity:
				return naviBeanEntityFromJson(data as NaviBeanEntity, json) as T;
			case NaviBeanArticles:
				return naviBeanArticlesFromJson(data as NaviBeanArticles, json) as T;
			case QuestionEntity:
				return questionEntityFromJson(data as QuestionEntity, json) as T;
			case QuestionDatas:
				return questionDatasFromJson(data as QuestionDatas, json) as T;
			case QuestionDatasTags:
				return questionDatasTagsFromJson(data as QuestionDatasTags, json) as T;
			case CoinEntity:
				return coinEntityFromJson(data as CoinEntity, json) as T;
			case MainTopListEntity:
				return mainTopListEntityFromJson(data as MainTopListEntity, json) as T;
			case MainTopListTags:
				return mainTopListTagsFromJson(data as MainTopListTags, json) as T;
			case MainListEntity:
				return mainListEntityFromJson(data as MainListEntity, json) as T;
			case MianListDatas:
				return mianListDatasFromJson(data as MianListDatas, json) as T;
			case SystemBeanEntity:
				return systemBeanEntityFromJson(data as SystemBeanEntity, json) as T;
			case SystemBeanChildren:
				return systemBeanChildrenFromJson(data as SystemBeanChildren, json) as T;
			case CommentsEntity:
				return commentsEntityFromJson(data as CommentsEntity, json) as T;
			case CommentsDatas:
				return commentsDatasFromJson(data as CommentsDatas, json) as T;
			case CommentsDatasReplyComments:
				return commentsDatasReplyCommentsFromJson(data as CommentsDatasReplyComments, json) as T;
			case ArticleEntity:
				return articleEntityFromJson(data as ArticleEntity, json) as T;
			case ArticleDatas:
				return articleDatasFromJson(data as ArticleDatas, json) as T;
			case BannerBeanEntity:
				return bannerBeanEntityFromJson(data as BannerBeanEntity, json) as T;
			case CoinListEntity:
				return coinListEntityFromJson(data as CoinListEntity, json) as T;
			case CoinListDatas:
				return coinListDatasFromJson(data as CoinListDatas, json) as T;
			case UserinfoEntity:
				return userinfoEntityFromJson(data as UserinfoEntity, json) as T;
			case UserinfoCoinInfo:
				return userinfoCoinInfoFromJson(data as UserinfoCoinInfo, json) as T;
			case UserinfoUserInfo:
				return userinfoUserInfoFromJson(data as UserinfoUserInfo, json) as T;
			case CoinRankEntity:
				return coinRankEntityFromJson(data as CoinRankEntity, json) as T;
			case CoinRankDatas:
				return coinRankDatasFromJson(data as CoinRankDatas, json) as T;
			case HotkeyEntity:
				return hotkeyEntityFromJson(data as HotkeyEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			case NaviBeanEntity:
				return naviBeanEntityToJson(data as NaviBeanEntity);
			case NaviBeanArticles:
				return naviBeanArticlesToJson(data as NaviBeanArticles);
			case QuestionEntity:
				return questionEntityToJson(data as QuestionEntity);
			case QuestionDatas:
				return questionDatasToJson(data as QuestionDatas);
			case QuestionDatasTags:
				return questionDatasTagsToJson(data as QuestionDatasTags);
			case CoinEntity:
				return coinEntityToJson(data as CoinEntity);
			case MainTopListEntity:
				return mainTopListEntityToJson(data as MainTopListEntity);
			case MainTopListTags:
				return mainTopListTagsToJson(data as MainTopListTags);
			case MainListEntity:
				return mainListEntityToJson(data as MainListEntity);
			case MianListDatas:
				return mianListDatasToJson(data as MianListDatas);
			case SystemBeanEntity:
				return systemBeanEntityToJson(data as SystemBeanEntity);
			case SystemBeanChildren:
				return systemBeanChildrenToJson(data as SystemBeanChildren);
			case CommentsEntity:
				return commentsEntityToJson(data as CommentsEntity);
			case CommentsDatas:
				return commentsDatasToJson(data as CommentsDatas);
			case CommentsDatasReplyComments:
				return commentsDatasReplyCommentsToJson(data as CommentsDatasReplyComments);
			case ArticleEntity:
				return articleEntityToJson(data as ArticleEntity);
			case ArticleDatas:
				return articleDatasToJson(data as ArticleDatas);
			case BannerBeanEntity:
				return bannerBeanEntityToJson(data as BannerBeanEntity);
			case CoinListEntity:
				return coinListEntityToJson(data as CoinListEntity);
			case CoinListDatas:
				return coinListDatasToJson(data as CoinListDatas);
			case UserinfoEntity:
				return userinfoEntityToJson(data as UserinfoEntity);
			case UserinfoCoinInfo:
				return userinfoCoinInfoToJson(data as UserinfoCoinInfo);
			case UserinfoUserInfo:
				return userinfoUserInfoToJson(data as UserinfoUserInfo);
			case CoinRankEntity:
				return coinRankEntityToJson(data as CoinRankEntity);
			case CoinRankDatas:
				return coinRankDatasToJson(data as CoinRankDatas);
			case HotkeyEntity:
				return hotkeyEntityToJson(data as HotkeyEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}
		if(type == (NaviBeanEntity).toString()){
			return NaviBeanEntity().fromJson(json);
		}
		if(type == (NaviBeanArticles).toString()){
			return NaviBeanArticles().fromJson(json);
		}
		if(type == (QuestionEntity).toString()){
			return QuestionEntity().fromJson(json);
		}
		if(type == (QuestionDatas).toString()){
			return QuestionDatas().fromJson(json);
		}
		if(type == (QuestionDatasTags).toString()){
			return QuestionDatasTags().fromJson(json);
		}
		if(type == (CoinEntity).toString()){
			return CoinEntity().fromJson(json);
		}
		if(type == (MainTopListEntity).toString()){
			return MainTopListEntity().fromJson(json);
		}
		if(type == (MainTopListTags).toString()){
			return MainTopListTags().fromJson(json);
		}
		if(type == (MainListEntity).toString()){
			return MainListEntity().fromJson(json);
		}
		if(type == (MianListDatas).toString()){
			return MianListDatas().fromJson(json);
		}
		if(type == (SystemBeanEntity).toString()){
			return SystemBeanEntity().fromJson(json);
		}
		if(type == (SystemBeanChildren).toString()){
			return SystemBeanChildren().fromJson(json);
		}
		if(type == (CommentsEntity).toString()){
			return CommentsEntity().fromJson(json);
		}
		if(type == (CommentsDatas).toString()){
			return CommentsDatas().fromJson(json);
		}
		if(type == (CommentsDatasReplyComments).toString()){
			return CommentsDatasReplyComments().fromJson(json);
		}
		if(type == (ArticleEntity).toString()){
			return ArticleEntity().fromJson(json);
		}
		if(type == (ArticleDatas).toString()){
			return ArticleDatas().fromJson(json);
		}
		if(type == (BannerBeanEntity).toString()){
			return BannerBeanEntity().fromJson(json);
		}
		if(type == (CoinListEntity).toString()){
			return CoinListEntity().fromJson(json);
		}
		if(type == (CoinListDatas).toString()){
			return CoinListDatas().fromJson(json);
		}
		if(type == (UserinfoEntity).toString()){
			return UserinfoEntity().fromJson(json);
		}
		if(type == (UserinfoCoinInfo).toString()){
			return UserinfoCoinInfo().fromJson(json);
		}
		if(type == (UserinfoUserInfo).toString()){
			return UserinfoUserInfo().fromJson(json);
		}
		if(type == (CoinRankEntity).toString()){
			return CoinRankEntity().fromJson(json);
		}
		if(type == (CoinRankDatas).toString()){
			return CoinRankDatas().fromJson(json);
		}
		if(type == (HotkeyEntity).toString()){
			return HotkeyEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}
		if(<NaviBeanEntity>[] is M){
			return data.map<NaviBeanEntity>((e) => NaviBeanEntity().fromJson(e)).toList() as M;
		}
		if(<NaviBeanArticles>[] is M){
			return data.map<NaviBeanArticles>((e) => NaviBeanArticles().fromJson(e)).toList() as M;
		}
		if(<QuestionEntity>[] is M){
			return data.map<QuestionEntity>((e) => QuestionEntity().fromJson(e)).toList() as M;
		}
		if(<QuestionDatas>[] is M){
			return data.map<QuestionDatas>((e) => QuestionDatas().fromJson(e)).toList() as M;
		}
		if(<QuestionDatasTags>[] is M){
			return data.map<QuestionDatasTags>((e) => QuestionDatasTags().fromJson(e)).toList() as M;
		}
		if(<CoinEntity>[] is M){
			return data.map<CoinEntity>((e) => CoinEntity().fromJson(e)).toList() as M;
		}
		if(<MainTopListEntity>[] is M){
			return data.map<MainTopListEntity>((e) => MainTopListEntity().fromJson(e)).toList() as M;
		}
		if(<MainTopListTags>[] is M){
			return data.map<MainTopListTags>((e) => MainTopListTags().fromJson(e)).toList() as M;
		}
		if(<MainListEntity>[] is M){
			return data.map<MainListEntity>((e) => MainListEntity().fromJson(e)).toList() as M;
		}
		if(<MianListDatas>[] is M){
			return data.map<MianListDatas>((e) => MianListDatas().fromJson(e)).toList() as M;
		}
		if(<SystemBeanEntity>[] is M){
			return data.map<SystemBeanEntity>((e) => SystemBeanEntity().fromJson(e)).toList() as M;
		}
		if(<SystemBeanChildren>[] is M){
			return data.map<SystemBeanChildren>((e) => SystemBeanChildren().fromJson(e)).toList() as M;
		}
		if(<CommentsEntity>[] is M){
			return data.map<CommentsEntity>((e) => CommentsEntity().fromJson(e)).toList() as M;
		}
		if(<CommentsDatas>[] is M){
			return data.map<CommentsDatas>((e) => CommentsDatas().fromJson(e)).toList() as M;
		}
		if(<CommentsDatasReplyComments>[] is M){
			return data.map<CommentsDatasReplyComments>((e) => CommentsDatasReplyComments().fromJson(e)).toList() as M;
		}
		if(<ArticleEntity>[] is M){
			return data.map<ArticleEntity>((e) => ArticleEntity().fromJson(e)).toList() as M;
		}
		if(<ArticleDatas>[] is M){
			return data.map<ArticleDatas>((e) => ArticleDatas().fromJson(e)).toList() as M;
		}
		if(<BannerBeanEntity>[] is M){
			return data.map<BannerBeanEntity>((e) => BannerBeanEntity().fromJson(e)).toList() as M;
		}
		if(<CoinListEntity>[] is M){
			return data.map<CoinListEntity>((e) => CoinListEntity().fromJson(e)).toList() as M;
		}
		if(<CoinListDatas>[] is M){
			return data.map<CoinListDatas>((e) => CoinListDatas().fromJson(e)).toList() as M;
		}
		if(<UserinfoEntity>[] is M){
			return data.map<UserinfoEntity>((e) => UserinfoEntity().fromJson(e)).toList() as M;
		}
		if(<UserinfoCoinInfo>[] is M){
			return data.map<UserinfoCoinInfo>((e) => UserinfoCoinInfo().fromJson(e)).toList() as M;
		}
		if(<UserinfoUserInfo>[] is M){
			return data.map<UserinfoUserInfo>((e) => UserinfoUserInfo().fromJson(e)).toList() as M;
		}
		if(<CoinRankEntity>[] is M){
			return data.map<CoinRankEntity>((e) => CoinRankEntity().fromJson(e)).toList() as M;
		}
		if(<CoinRankDatas>[] is M){
			return data.map<CoinRankDatas>((e) => CoinRankDatas().fromJson(e)).toList() as M;
		}
		if(<HotkeyEntity>[] is M){
			return data.map<HotkeyEntity>((e) => HotkeyEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}